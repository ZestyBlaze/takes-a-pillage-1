plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {url "https://maven.parchmentmc.org"}
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.terraformersmc.com/" }
	maven { url 'https://jitpack.io' }
}

dependencies {
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_mappings}@zip")
	}
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	modImplementation(include("maven.modrinth:midnightlib:${project.midnightlib_version}"))
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude group: "net.fabricmc.fabric-api"
	}
	implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
	annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/takesapillage.accessWidener")
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}
